Index: src/Core/Board.c
===================================================================
--- src/Core/Board.c	(revision 283)
+++ src/Core/Board.c	(working copy)
@@ -33,6 +33,11 @@
 struct Board* Board_create_string(char *str, struct BoardDefinition *bd){
 	struct Board *b = Board_malloc();
 	b->data = Board_string_toData(str, bd);
+	
+	if (!b->data) {
+		free(b);
+		return NULL;
+	}
 	return b;
 }
 
@@ -70,7 +75,12 @@
 	char *result = (char *)malloc((1+bd->size)*sizeof(char));
 	int i = 0;
 	for (i = 0; i < bd->size; i = i + 1){
-		result[i] = ((int*)bd->pieces.array)[(int)b->data[i]];
+		if (b->data[i] < 0 || b->data[i] >= bd->pieces.count) {
+			//fprintf(stderr,"Invalid board piece %d at %d,%d\n",b->data[i],i);
+			free(result);
+			return NULL;
+		}
+		result[i] = ((intptr_t*)bd->pieces.array)[(int)b->data[i]];
 	}
 	result[i] = 0;
 	return result;
@@ -83,11 +93,16 @@
 	int count = bd->pieces.count;
 	for (i = 0; i < length; i = i + 1){
 		for (j = 0; j < count; j = j + 1){
-			if (((int *)bd->pieces.array)[j] == str[i]){
+			if (((intptr_t *)bd->pieces.array)[j] == str[i]){
 				data[i] = j;
 				break;
 			}
 		}
+		if (j == count) {
+			//fprintf(stderr,"Invalid character '%c' at %d,%d\n",str[i],i,j);
+			free(data);
+			return NULL;
+		}
 	}
 	return data;
 }
